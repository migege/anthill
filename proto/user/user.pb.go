// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/migege/anthill/proto/user/user.proto

/*
Package com_mayibot_ah_user is a generated protocol buffer package.

It is generated from these files:
	github.com/migege/anthill/proto/user/user.proto

It has these top-level messages:
	User
	Queen
	Command
	Response
*/
package com_mayibot_ah_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User_Status int32

const (
	User_UNACTIVATED User_Status = 0
	User_ACTIVATED   User_Status = 1
	User_FROZEN      User_Status = 2
)

var User_Status_name = map[int32]string{
	0: "UNACTIVATED",
	1: "ACTIVATED",
	2: "FROZEN",
}
var User_Status_value = map[string]int32{
	"UNACTIVATED": 0,
	"ACTIVATED":   1,
	"FROZEN":      2,
}

func (x User_Status) String() string {
	return proto.EnumName(User_Status_name, int32(x))
}
func (User_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Command_Action int32

const (
	Command_RESTART     Command_Action = 0
	Command_STOP        Command_Action = 1
	Command_SYNC_CONFIG Command_Action = 2
)

var Command_Action_name = map[int32]string{
	0: "RESTART",
	1: "STOP",
	2: "SYNC_CONFIG",
}
var Command_Action_value = map[string]int32{
	"RESTART":     0,
	"STOP":        1,
	"SYNC_CONFIG": 2,
}

func (x Command_Action) String() string {
	return proto.EnumName(Command_Action_name, int32(x))
}
func (Command_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type User struct {
	Uid      uint64      `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Username string      `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Phone    string      `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Password string      `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	Email    string      `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Status   User_Status `protobuf:"varint,6,opt,name=status,enum=com.mayibot.ah.user.User_Status" json:"status,omitempty"`
	Ctime    string      `protobuf:"bytes,7,opt,name=ctime" json:"ctime,omitempty"`
	Expired  int64       `protobuf:"varint,8,opt,name=expired" json:"expired,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetStatus() User_Status {
	if m != nil {
		return m.Status
	}
	return User_UNACTIVATED
}

func (m *User) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *User) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

type Queen struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Pid      int32  `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	Osname   string `protobuf:"bytes,5,opt,name=osname" json:"osname,omitempty"`
	IpAddr   string `protobuf:"bytes,6,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	Ctime    string `protobuf:"bytes,7,opt,name=ctime" json:"ctime,omitempty"`
}

func (m *Queen) Reset()                    { *m = Queen{} }
func (m *Queen) String() string            { return proto.CompactTextString(m) }
func (*Queen) ProtoMessage()               {}
func (*Queen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Queen) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Queen) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Queen) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Queen) GetOsname() string {
	if m != nil {
		return m.Osname
	}
	return ""
}

func (m *Queen) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *Queen) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

type Command struct {
	Action Command_Action `protobuf:"varint,1,opt,name=action,enum=com.mayibot.ah.user.Command_Action" json:"action,omitempty"`
	AntId  uint64         `protobuf:"varint,2,opt,name=ant_id,json=antId" json:"ant_id,omitempty"`
	Data   string         `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Ts     int64          `protobuf:"varint,4,opt,name=ts" json:"ts,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Command) GetAction() Command_Action {
	if m != nil {
		return m.Action
	}
	return Command_RESTART
}

func (m *Command) GetAntId() uint64 {
	if m != nil {
		return m.AntId
	}
	return 0
}

func (m *Command) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Command) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type Response struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "com.mayibot.ah.user.User")
	proto.RegisterType((*Queen)(nil), "com.mayibot.ah.user.Queen")
	proto.RegisterType((*Command)(nil), "com.mayibot.ah.user.Command")
	proto.RegisterType((*Response)(nil), "com.mayibot.ah.user.Response")
	proto.RegisterEnum("com.mayibot.ah.user.User_Status", User_Status_name, User_Status_value)
	proto.RegisterEnum("com.mayibot.ah.user.Command_Action", Command_Action_name, Command_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserServiceClient interface {
	Register(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Login(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	NewQueen(ctx context.Context, in *Queen, opts ...client.CallOption) (*Queen, error)
	FireCommand(ctx context.Context, in *Command, opts ...client.CallOption) (*Response, error)
	OnCommand(ctx context.Context, in *Queen, opts ...client.CallOption) (UserService_OnCommandClient, error)
}

type userServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUserServiceClient(serviceName string, c client.Client) UserServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.mayibot.ah.user"
	}
	return &userServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userServiceClient) Register(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.Register", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.Login", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) NewQueen(ctx context.Context, in *Queen, opts ...client.CallOption) (*Queen, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.NewQueen", in)
	out := new(Queen)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FireCommand(ctx context.Context, in *Command, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.FireCommand", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) OnCommand(ctx context.Context, in *Queen, opts ...client.CallOption) (UserService_OnCommandClient, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.OnCommand", &Queen{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userServiceOnCommandClient{stream}, nil
}

type UserService_OnCommandClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Command, error)
}

type userServiceOnCommandClient struct {
	stream client.Streamer
}

func (x *userServiceOnCommandClient) Close() error {
	return x.stream.Close()
}

func (x *userServiceOnCommandClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceOnCommandClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceOnCommandClient) Recv() (*Command, error) {
	m := new(Command)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Register(context.Context, *User, *User) error
	Login(context.Context, *User, *User) error
	NewQueen(context.Context, *Queen, *Queen) error
	FireCommand(context.Context, *Command, *Response) error
	OnCommand(context.Context, *Queen, UserService_OnCommandStream) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserService{hdlr}, opts...))
}

type UserService struct {
	UserServiceHandler
}

func (h *UserService) Register(ctx context.Context, in *User, out *User) error {
	return h.UserServiceHandler.Register(ctx, in, out)
}

func (h *UserService) Login(ctx context.Context, in *User, out *User) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *UserService) NewQueen(ctx context.Context, in *Queen, out *Queen) error {
	return h.UserServiceHandler.NewQueen(ctx, in, out)
}

func (h *UserService) FireCommand(ctx context.Context, in *Command, out *Response) error {
	return h.UserServiceHandler.FireCommand(ctx, in, out)
}

func (h *UserService) OnCommand(ctx context.Context, stream server.Streamer) error {
	m := new(Queen)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserServiceHandler.OnCommand(ctx, m, &userServiceOnCommandStream{stream})
}

type UserService_OnCommandStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Command) error
}

type userServiceOnCommandStream struct {
	stream server.Streamer
}

func (x *userServiceOnCommandStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceOnCommandStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceOnCommandStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceOnCommandStream) Send(m *Command) error {
	return x.stream.Send(m)
}

func init() { proto.RegisterFile("github.com/migege/anthill/proto/user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0x6e, 0x4b, 0x5b, 0xe0, 0x10, 0xaf, 0xcd, 0xf8, 0x57, 0x89, 0x26, 0xa4, 0x6e, 0x58, 0x95,
	0x1b, 0x74, 0x71, 0x13, 0x17, 0x06, 0xb9, 0x60, 0x48, 0x6e, 0x40, 0x07, 0xae, 0x89, 0x6e, 0xc8,
	0xd0, 0x99, 0x94, 0x49, 0x68, 0xa7, 0xe9, 0x0c, 0x5e, 0x7d, 0x07, 0x1f, 0xc1, 0xb7, 0xf0, 0xc9,
	0x7c, 0x03, 0x33, 0x53, 0x8a, 0x1b, 0x2e, 0x0b, 0x37, 0xcd, 0xf9, 0x72, 0xbe, 0xf3, 0xcd, 0x39,
	0xdf, 0x39, 0x29, 0x0c, 0x52, 0xae, 0xb6, 0xfb, 0x4d, 0x9c, 0x88, 0x6c, 0x90, 0xf1, 0x94, 0xa5,
	0x6c, 0x40, 0x72, 0xb5, 0xe5, 0xbb, 0xdd, 0xa0, 0x28, 0x85, 0x12, 0x83, 0xbd, 0x64, 0xa5, 0xf9,
	0xc4, 0x06, 0xa3, 0x47, 0x89, 0xc8, 0xe2, 0x8c, 0xfc, 0xe0, 0x1b, 0xa1, 0x62, 0xb2, 0x8d, 0x75,
	0x2a, 0xfa, 0xe5, 0x80, 0x7b, 0x2b, 0x59, 0x89, 0x02, 0x68, 0xec, 0x39, 0x0d, 0xed, 0x9e, 0xdd,
	0x77, 0xb1, 0x0e, 0x51, 0x17, 0x5a, 0x9a, 0x92, 0x93, 0x8c, 0x85, 0x4e, 0xcf, 0xee, 0xb7, 0xf1,
	0x11, 0xa3, 0xc7, 0xe0, 0x15, 0x5b, 0x91, 0xb3, 0xb0, 0x61, 0x12, 0x15, 0xd0, 0x15, 0x05, 0x91,
	0xf2, 0x4e, 0x94, 0x34, 0x74, 0xab, 0x8a, 0x1a, 0xeb, 0x0a, 0x96, 0x11, 0xbe, 0x0b, 0xbd, 0xaa,
	0xc2, 0x00, 0x74, 0x05, 0xbe, 0x54, 0x44, 0xed, 0x65, 0xe8, 0xf7, 0xec, 0xfe, 0xc5, 0xb0, 0x17,
	0x9f, 0x68, 0x32, 0xd6, 0x0d, 0xc6, 0x4b, 0xc3, 0xc3, 0x07, 0xbe, 0xd6, 0x4b, 0x14, 0xcf, 0x58,
	0xd8, 0xac, 0xf4, 0x0c, 0x40, 0x21, 0x34, 0xd9, 0xf7, 0x82, 0x97, 0x8c, 0x86, 0xad, 0x9e, 0xdd,
	0x6f, 0xe0, 0x1a, 0x46, 0x6f, 0xc0, 0xaf, 0x14, 0xd0, 0x43, 0xe8, 0xdc, 0xce, 0x47, 0xe3, 0xd5,
	0xec, 0xf3, 0x68, 0x35, 0xb9, 0x0e, 0x2c, 0xf4, 0x00, 0xda, 0xff, 0xa0, 0x8d, 0x00, 0xfc, 0x29,
	0x5e, 0x7c, 0x9d, 0xcc, 0x03, 0x27, 0xfa, 0x69, 0x83, 0xf7, 0x69, 0xcf, 0x58, 0x8e, 0x2e, 0xc0,
	0x39, 0xda, 0xe3, 0x54, 0xee, 0x6c, 0x85, 0x54, 0xc6, 0x9d, 0xca, 0x84, 0x23, 0xd6, 0x5e, 0x16,
	0xbc, 0xb2, 0xc0, 0xc3, 0x3a, 0x44, 0x4f, 0xc1, 0x17, 0xd2, 0x70, 0xab, 0xf1, 0x0f, 0x08, 0x3d,
	0x83, 0x26, 0x2f, 0xd6, 0x84, 0xd2, 0xd2, 0x18, 0xd0, 0xc6, 0x3e, 0x2f, 0x46, 0x94, 0x96, 0xa7,
	0xc7, 0x8b, 0x7e, 0xdb, 0xd0, 0x1c, 0x8b, 0x2c, 0x23, 0x39, 0x45, 0x6f, 0xc1, 0x27, 0x89, 0xe2,
	0x22, 0x37, 0x4d, 0x5d, 0x0c, 0x5f, 0x9d, 0xb4, 0xee, 0xc0, 0x8e, 0x47, 0x86, 0x8a, 0x0f, 0x25,
	0xe8, 0x09, 0xf8, 0x24, 0x57, 0x6b, 0x4e, 0xcd, 0x66, 0x5d, 0xec, 0x91, 0x5c, 0xcd, 0x28, 0x42,
	0xe0, 0x52, 0xa2, 0xc8, 0x61, 0x20, 0x13, 0xeb, 0xc1, 0x95, 0x34, 0xb3, 0x34, 0xb0, 0xa3, 0x64,
	0x74, 0x09, 0x7e, 0x25, 0x86, 0x3a, 0xd0, 0xc4, 0x93, 0xe5, 0x6a, 0x84, 0x57, 0x81, 0x85, 0x5a,
	0xe0, 0x2e, 0x57, 0x8b, 0x8f, 0x81, 0xad, 0xfd, 0x5d, 0x7e, 0x99, 0x8f, 0xd7, 0xe3, 0xc5, 0x7c,
	0x3a, 0xfb, 0x10, 0x38, 0xd1, 0x15, 0xb4, 0x30, 0x93, 0x85, 0xc8, 0x25, 0xd3, 0x2f, 0x24, 0x82,
	0x32, 0xd3, 0x73, 0x03, 0x9b, 0x58, 0x2f, 0x2d, 0x63, 0x52, 0x92, 0xb4, 0xbe, 0xb3, 0x1a, 0x0e,
	0xff, 0x38, 0xd0, 0xd1, 0xcb, 0x5f, 0xb2, 0xf2, 0x1b, 0x4f, 0x18, 0x7a, 0xaf, 0x95, 0x52, 0x2e,
	0x15, 0x2b, 0xd1, 0xf3, 0x7b, 0x4f, 0xa5, 0x7b, 0x7f, 0x2a, 0xb2, 0xd0, 0x3b, 0xf0, 0x6e, 0x44,
	0xca, 0xf3, 0xff, 0x16, 0xb8, 0x86, 0xd6, 0x9c, 0xdd, 0x55, 0x57, 0xd1, 0x3d, 0x49, 0x34, 0xb9,
	0xee, 0x99, 0x5c, 0x64, 0xa1, 0x1b, 0xe8, 0x4c, 0x79, 0xc9, 0xea, 0x6d, 0xbe, 0x38, 0xb7, 0xbd,
	0xee, 0xcb, 0x93, 0xd9, 0xda, 0xd4, 0xc8, 0x42, 0x33, 0x68, 0x2f, 0xf2, 0x5a, 0xeb, 0x5c, 0x53,
	0x67, 0xdf, 0x89, 0xac, 0x4b, 0x7b, 0xe3, 0x9b, 0xbf, 0xc5, 0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x56, 0x1c, 0xbc, 0x60, 0x04, 0x00, 0x00,
}
